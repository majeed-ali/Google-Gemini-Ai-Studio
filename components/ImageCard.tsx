
import React from 'react';
import { ImageResult } from '../types';
import { DownloadIcon, EditIcon } from './Icons';

interface ImageCardProps {
  imageResult: ImageResult;
  onEdit: (imageResult: ImageResult) => void;
  prompt: string;
}

const ImageCard: React.FC<ImageCardProps> = ({ imageResult, onEdit, prompt }) => {

  const handleSave = () => {
    const link = document.createElement('a');
    link.href = `data:image/png;base64,${imageResult.base64}`;
    const safePrompt = prompt.replace(/[^a-z0-9]/gi, '_').toLowerCase().slice(0, 30);
    link.download = `gemini-img-${safePrompt}-${imageResult.id.slice(0, 6)}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="group relative aspect-square overflow-hidden rounded-lg bg-gray-800 shadow-lg transition-transform duration-300 hover:scale-105">
      <img
        src={`data:image/png;base64,${imageResult.base64}`}
        alt="Generated by Gemini"
        className="h-full w-full object-cover"
      />
      <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-4">
        <button
          onClick={() => onEdit(imageResult)}
          className="p-3 rounded-full bg-white/20 text-white hover:bg-white/30 backdrop-blur-sm transition-colors"
          aria-label="Edit image"
        >
          <EditIcon className="w-6 h-6" />
        </button>
        <button
          onClick={handleSave}
          className="p-3 rounded-full bg-white/20 text-white hover:bg-white/30 backdrop-blur-sm transition-colors"
          aria-label="Download image"
        >
          <DownloadIcon className="w-6 h-6" />
        </button>
      </div>
    </div>
  );
};

export default ImageCard;
